import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import toast from 'react-hot-toast';
import { useAuth } from '../contexts/AuthContext';
import { 
  EyeIcon, 
  EyeSlashIcon,
  DocumentArrowDownIcon,
  ShieldCheckIcon 
} from '@heroicons/react/24/outline';
import jsPDF from 'jspdf';
import LoadingSpinner from '../components/LoadingSpinner';
import ProtectedRoute from '../components/ProtectedRoute';

const GmailItax = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    email: '',
    emailPassword: '',
    itaxPin: '',
    itaxPassword: ''
  });
  const [showEmailPassword, setShowEmailPassword] = useState(false);
  const [showItaxPassword, setShowItaxPassword] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [pdfGenerated, setPdfGenerated] = useState(false);
  const [generatedPdf, setGeneratedPdf] = useState(null);

  const { user } = useAuth();
  const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
  const API = `${BACKEND_URL}/api`;

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const validateForm = () => {
    const { firstName, email, emailPassword, itaxPin, itaxPassword } = formData;
    
    if (!firstName || !email || !emailPassword || !itaxPin || !itaxPassword) {
      toast.error('All fields are required');
      return false;
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      toast.error('Please enter a valid email address');
      return false;
    }

    // iTax PIN validation (format: A123456789B)
    const itaxRegex = /^[A-Za-z]\d{9}[A-Za-z]$/;
    if (!itaxRegex.test(itaxPin)) {
      toast.error('Invalid iTax PIN format. Expected format: A123456789B');
      return false;
    }

    return true;
  };

  const generatePDF = async () => {
    if (!validateForm()) return;

    setIsGenerating(true);

    try {
      // Generate PDF using jsPDF
      const doc = new jsPDF();
      let yPosition = 20;
      const lineSpacing = 10;

      // Helper function to add text to PDF
      const addText = (label, data, isBold = false) => {
        doc.setFont('helvetica', isBold ? 'bold' : 'normal');
        doc.setFontSize(12);
        
        if (isBold) {
          doc.setTextColor(0, 102, 204);
          doc.text(label, 20, yPosition);
          doc.setTextColor(80, 80, 80);
          doc.text(data, 80, yPosition);
        } else {
          doc.setTextColor(80, 80, 80);
          doc.text(label, 20, yPosition);
          doc.text(data, 80, yPosition);
        }
        yPosition += lineSpacing;
      };

      // Header
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(16);
      doc.setTextColor(0, 0, 0);
      doc.text(`Hello ${formData.firstName},`, 20, yPosition);
      yPosition += lineSpacing;

      doc.setFont('helvetica', 'normal');
      doc.setFontSize(12);
      doc.setTextColor(80, 80, 80);
      doc.text('These are your Account Access Details', 20, yPosition);
      yPosition += lineSpacing * 1.5;

      // Add form data
      addText('FIRST NAME:', formData.firstName, true);
      addText('EMAIL:', formData.email, true);
      addText('EMAIL PASSWORD:', formData.emailPassword, true);
      addText('ITAX PIN:', formData.itaxPin.toUpperCase(), true);
      addText('ITAX PASSWORD:', formData.itaxPassword, true);

      yPosition += lineSpacing;
      doc.setFont('helvetica', 'italic');
      doc.setFontSize(12);
      doc.setTextColor(40, 40, 40);
      doc.text('Keep them confidential and safe.', 20, yPosition);

      // Footer
      doc.setFont('helvetica', 'italic');
      doc.setFontSize(10);
      doc.setTextColor(100, 100, 100);
      doc.text('Generated by TWOEM Online Productions, Kagwe â€“ Opp Total Petrol Station, Tel: 0707 330 204', 20, 280);

      setGeneratedPdf(doc);
      setPdfGenerated(true);
      toast.success('PDF generated successfully!');
    } catch (error) {
      console.error('PDF generation error:', error);
      toast.error('Failed to generate PDF');
    } finally {
      setIsGenerating(false);
    }
  };

  const downloadPDF = () => {
    if (generatedPdf) {
      generatedPdf.save(`${formData.firstName}_TWOEM_Gmail_iTax_Details.pdf`);
      toast.success('PDF downloaded successfully!');
    }
  };

  const saveCredentials = async () => {
    if (!validateForm()) return;

    setIsSaving(true);

    try {
      const credentialsData = {
        first_name: formData.firstName,
        email: formData.email,
        email_password: formData.emailPassword,
        itax_pin: formData.itaxPin.toUpperCase(),
        itax_password: formData.itaxPassword
      };

      await axios.post(`${API}/credentials`, credentialsData);
      toast.success('Credentials saved securely!');
    } catch (error) {
      const message = error.response?.data?.detail || 'Failed to save credentials';
      toast.error(message);
    } finally {
      setIsSaving(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await generatePDF();
  };

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-gray-50 pt-20">
        {/* Header */}
        <div className="bg-gradient-to-r from-blue-600 to-green-600 text-white py-16">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
            <h1 className="text-4xl md:text-5xl font-bold mb-4">
              Gmail & iTax Services
            </h1>
            <p className="text-xl text-blue-100 max-w-2xl mx-auto">
              Generate and securely store your Gmail and iTax credentials
            </p>
          </div>
        </div>

        {/* Form Section */}
        <div className="py-20">
          <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="bg-white rounded-xl shadow-lg p-8">
              <div className="text-center mb-8">
                <h2 className="text-2xl font-bold text-gray-900 mb-2">
                  Account Details Form
                </h2>
                <p className="text-gray-600">
                  Enter your Gmail and iTax information to generate a secure PDF
                </p>
              </div>

              <form onSubmit={handleSubmit} className="space-y-6">
                {/* First Name */}
                <div>
                  <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-2">
                    First Name
                  </label>
                  <input
                    type="text"
                    id="firstName"
                    name="firstName"
                    value={formData.firstName}
                    onChange={handleInputChange}
                    required
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="e.g. Naomi"
                  />
                </div>

                {/* Gmail Section */}
                <div className="bg-blue-50 rounded-lg p-6">
                  <div className="flex items-center mb-4">
                    <img 
                      src="/images/gmail.png" 
                      alt="Gmail" 
                      className="h-6 w-6 mr-2"
                      onError={(e) => {
                        e.target.style.display = 'none';
                      }}
                    />
                    <h3 className="text-lg font-semibold text-gray-900">Gmail Details</h3>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                        Email Address
                      </label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        required
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="you@example.com"
                      />
                    </div>

                    <div>
                      <label htmlFor="emailPassword" className="block text-sm font-medium text-gray-700 mb-2">
                        Email Password
                      </label>
                      <div className="relative">
                        <input
                          type={showEmailPassword ? 'text' : 'password'}
                          id="emailPassword"
                          name="emailPassword"
                          value={formData.emailPassword}
                          onChange={handleInputChange}
                          required
                          className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="Enter Gmail Password"
                        />
                        <button
                          type="button"
                          onClick={() => setShowEmailPassword(!showEmailPassword)}
                          className="absolute inset-y-0 right-0 pr-3 flex items-center"
                        >
                          {showEmailPassword ? (
                            <EyeSlashIcon className="h-5 w-5 text-gray-400" />
                          ) : (
                            <EyeIcon className="h-5 w-5 text-gray-400" />
                          )}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>

                {/* iTax Section */}
                <div className="bg-green-50 rounded-lg p-6">
                  <div className="flex items-center mb-4">
                    <img 
                      src="/images/itax.png" 
                      alt="iTax" 
                      className="h-6 w-6 mr-2"
                      onError={(e) => {
                        e.target.style.display = 'none';
                      }}
                    />
                    <h3 className="text-lg font-semibold text-gray-900">iTax Details</h3>
                  </div>
                  
                  <p className="text-sm text-gray-600 mb-4">
                    These are the KRA iTax credentials for PIN and login.
                  </p>

                  <div className="space-y-4">
                    <div>
                      <label htmlFor="itaxPin" className="block text-sm font-medium text-gray-700 mb-2">
                        iTax PIN (e.g. A123456789B)
                      </label>
                      <input
                        type="text"
                        id="itaxPin"
                        name="itaxPin"
                        value={formData.itaxPin}
                        onChange={handleInputChange}
                        required
                        pattern="[A-Za-z]\d{9}[A-Za-z]"
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="Enter iTax PIN"
                      />
                    </div>

                    <div>
                      <label htmlFor="itaxPassword" className="block text-sm font-medium text-gray-700 mb-2">
                        iTax Password
                      </label>
                      <div className="relative">
                        <input
                          type={showItaxPassword ? 'text' : 'password'}
                          id="itaxPassword"
                          name="itaxPassword"
                          value={formData.itaxPassword}
                          onChange={handleInputChange}
                          required
                          className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                          placeholder="Enter iTax Password"
                        />
                        <button
                          type="button"
                          onClick={() => setShowItaxPassword(!showItaxPassword)}
                          className="absolute inset-y-0 right-0 pr-3 flex items-center"
                        >
                          {showItaxPassword ? (
                            <EyeSlashIcon className="h-5 w-5 text-gray-400" />
                          ) : (
                            <EyeIcon className="h-5 w-5 text-gray-400" />
                          )}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-4">
                  <button
                    type="submit"
                    disabled={isGenerating}
                    className="flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center justify-center"
                  >
                    {isGenerating ? (
                      <LoadingSpinner size="sm" color="white" />
                    ) : (
                      <>
                        <DocumentArrowDownIcon className="h-5 w-5 mr-2" />
                        Generate PDF
                      </>
                    )}
                  </button>

                  <button
                    type="button"
                    onClick={downloadPDF}
                    disabled={!pdfGenerated}
                    className="flex-1 bg-green-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-green-700 transition-colors disabled:opacity-50 flex items-center justify-center"
                  >
                    <DocumentArrowDownIcon className="h-5 w-5 mr-2" />
                    Download PDF
                  </button>

                  <button
                    type="button"
                    onClick={saveCredentials}
                    disabled={isSaving || !pdfGenerated}
                    className="flex-1 bg-purple-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-purple-700 transition-colors disabled:opacity-50 flex items-center justify-center"
                  >
                    {isSaving ? (
                      <LoadingSpinner size="sm" color="white" />
                    ) : (
                      <>
                        <ShieldCheckIcon className="h-5 w-5 mr-2" />
                        Save Securely
                      </>
                    )}
                  </button>
                </div>
              </form>

              {/* Security Notice */}
              <div className="mt-8 bg-amber-50 border border-amber-200 rounded-lg p-4">
                <h4 className="text-sm font-semibold text-amber-800 mb-2">
                  ðŸ”’ Security Notice
                </h4>
                <p className="text-sm text-amber-700">
                  Your credentials are encrypted and stored securely. Only you and authorized 
                  administrators can access them. The PDF is generated locally in your browser 
                  and can be downloaded safely.
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Home Button */}
        <Link
          to="/"
          className="fixed bottom-4 right-4 bg-blue-600 hover:bg-blue-700 text-white p-4 rounded-full shadow-lg transition-colors z-40"
          title="Back to Home"
        >
          <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
          </svg>
        </Link>
      </div>
    </ProtectedRoute>
  );
};

export default GmailItax;